'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var sass = _interopDefault(require('node-sass'));
var path = _interopDefault(require('path'));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var EXCLUDE_PATTERN = /node_modules|bower_components/;

function addDep(list, item) {
  if (list.indexOf(item) === -1) list.push(item);
}

var Audit = function () {
  function Audit(rootDir) {
    classCallCheck(this, Audit);

    this.rootDir = rootDir;
    this.includedFiles = [];
    this.result = null;
    this.lastStartAt = null;
    this.hash = null;
  }

  createClass(Audit, [{
    key: 'isUpToDay',
    value: function isUpToDay(timestamps) {
      if (this.lastStartAt) {
        var maxTimestamp = this.includedFiles.reduce(function (acc, key) {
          if (timestamps[key] && acc < timestamps[key]) {
            return timestamps[key];
          } else {
            return acc;
          }
        }, 0);

        if (this.lastStartAt < maxTimestamp) {
          this.hash = maxTimestamp.toString();
        } else {
          this.hash = null;
          return true;
        }
      } else {
        this.hash = 'init';
      }

      return false;
    }
  }, {
    key: 'track',
    value: function track(stats) {
      this.result = {
        includedFiles: stats.includedFiles.filter(function (file) {
          return !EXCLUDE_PATTERN.test(file);
        }),
        start: stats.start
      };
    }
  }, {
    key: 'handle',
    value: function handle(compilation) {
      if (this.result !== null) {
        this.lastStartAt = this.result.start;
        this.includedFiles = this.result.includedFiles;
        this.result = null;
      }

      addDep(compilation.contextDependencies, this.rootDir);
      this.includedFiles.forEach(function (file) {
        return addDep(compilation.fileDependencies, file);
      });
      if (this.hash && this.hash !== 'init') compilation.modifyHash(this.hash);
    }
  }]);
  return Audit;
}();

var MARK = 'sass-webpack-plugin';

function toFilename(originFile) {
  return path.basename(originFile).replace(/(scss|sass)$/i, 'css');
}

function toAsset(result) {
  return {
    map: function map() {
      return result.map;
    },
    source: function source() {
      return result.css;
    },
    size: function size() {
      return result.css.byteLength;
    }
  };
}

function wrapError(err) {
  var header = MARK;
  if (err.file && err.line) {
    header = header + ' ' + err.file + ':' + err.line;
  }
  return new Error(header + '\n\n' + err.message + '\n');
}

var SassPlugin = function () {
  function SassPlugin(file, mode, custom) {
    classCallCheck(this, SassPlugin);

    var options = {};

    if (mode === 'development' || mode === undefined) {
      options = {
        indentedSyntax: true,
        indentWidth: 2,
        sourceMap: true,
        sourceMapEmbed: true,
        sourceComments: true,
        sourceMapContents: true
      };
    } else if (mode === 'production') {
      options = { outputStyle: 'compressed' };
    } else if ((typeof mode === 'undefined' ? 'undefined' : _typeof(mode)) === 'object') {
      options = mode;
    }

    if ((typeof custom === 'undefined' ? 'undefined' : _typeof(custom)) === 'object') {
      options = Object.assign(options, custom);
    }
    options.file = path.resolve(file);
    this.options = options;
  }

  createClass(SassPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var options = this.options;
      var fileName = toFilename(options.file);
      var audit = new Audit(path.dirname(options.file));
      var chunk = void 0;

      compiler.plugin('compilation', function (compilation) {
        // skip child compilers
        if (compilation.compiler !== compiler) return;

        chunk = compilation.addChunk(MARK);
        chunk.ids = [];
        if (chunk.files.indexOf(fileName) === -1) chunk.files.push(fileName);

        if (audit.isUpToDay(compilation.fileTimestamps)) return;

        compilation.plugin('additional-assets', function (cb) {
          sass.render(options, function (err, result) {
            if (err) {
              compilation.errors.push(wrapError(err));
            } else {
              compilation.assets[options.outFile || fileName] = toAsset(result);
              audit.track(result.stats);
            }
            cb();
          });
        });
      });

      compiler.plugin('emit', function (compilation, cb) {
        var mainModule = compilation.modules[0];
        chunk.addModule(mainModule);
        mainModule.addChunk(chunk);
        compilation.chunks.push(chunk);
        cb();
      });

      compiler.plugin('after-emit', function (compilation, cb) {
        audit.handle(compilation);
        cb();
      });
    }
  }]);
  return SassPlugin;
}();

module.exports = SassPlugin;
